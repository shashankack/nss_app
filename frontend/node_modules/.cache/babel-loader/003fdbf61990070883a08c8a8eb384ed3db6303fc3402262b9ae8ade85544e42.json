{"ast":null,"code":"import axios from 'axios';\nlet user = null;\n\n// Function to retrieve user data from localStorage\nfunction getUser() {\n  const userData = localStorage.getItem('user');\n  return userData ? JSON.parse(userData) : null;\n}\nfunction setAccessToken(accessToken) {\n  localStorage.setItem('accessToken', tokens.access);\n}\nfunction setRefreshToken(refreshToken) {\n  localStorage.setItem('refreshToken', refreshToken);\n}\n\n// Function to perform logout API call\nexport async function logout() {\n  try {\n    await axios.post('/logout');\n    removeUser();\n  } catch (error) {\n    console.error('Logout failed:', error);\n  }\n}\n\n// Function to perform refresh token API call\nexport async function refreshToken() {\n  try {\n    const response = await axios.post('/refresh-token');\n    const {\n      accessToken,\n      refreshToken\n    } = response.data;\n    const currentUser = getUser();\n    setUser({\n      ...currentUser,\n      accessToken,\n      refreshToken\n    });\n  } catch (error) {\n    console.error('Refresh token failed:', error);\n    throw error; // Propagate the error for interceptor to handle\n  }\n}\n\n// Function to get current user data\nexport function getCurrentUser() {\n  if (!user) {\n    user = getUser();\n  }\n  return user;\n}","map":{"version":3,"names":["axios","user","getUser","userData","localStorage","getItem","JSON","parse","setAccessToken","accessToken","setItem","tokens","access","setRefreshToken","refreshToken","logout","post","removeUser","error","console","response","data","currentUser","setUser","getCurrentUser"],"sources":["/app/src/utils/auth.js"],"sourcesContent":["\nimport axios from 'axios';\n\nlet user = null;\n\n\n// Function to retrieve user data from localStorage\nfunction getUser() {\n  const userData = localStorage.getItem('user');\n  return userData ? JSON.parse(userData) : null;\n}\n\nfunction setAccessToken(accessToken) {\n  localStorage.setItem('accessToken', tokens.access);\n}\n\nfunction setRefreshToken(refreshToken) {\n  localStorage.setItem('refreshToken', refreshToken);\n}\n\n// Function to perform logout API call\nexport async function logout() {\n  try {\n    await axios.post('/logout');\n    removeUser();\n  } catch (error) {\n    console.error('Logout failed:', error);\n  }\n}\n\n// Function to perform refresh token API call\nexport async function refreshToken() {\n  try {\n    const response = await axios.post('/refresh-token');\n    const { accessToken, refreshToken } = response.data;\n    const currentUser = getUser();\n    setUser({ ...currentUser, accessToken, refreshToken });\n  } catch (error) {\n    console.error('Refresh token failed:', error);\n    throw error; // Propagate the error for interceptor to handle\n  }\n}\n\n// Function to get current user data\nexport function getCurrentUser() {\n  if (!user) {\n    user = getUser();\n  }\n  return user;\n}\n"],"mappings":"AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,IAAIC,IAAI,GAAG,IAAI;;AAGf;AACA,SAASC,OAAOA,CAAA,EAAG;EACjB,MAAMC,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;EAC7C,OAAOF,QAAQ,GAAGG,IAAI,CAACC,KAAK,CAACJ,QAAQ,CAAC,GAAG,IAAI;AAC/C;AAEA,SAASK,cAAcA,CAACC,WAAW,EAAE;EACnCL,YAAY,CAACM,OAAO,CAAC,aAAa,EAAEC,MAAM,CAACC,MAAM,CAAC;AACpD;AAEA,SAASC,eAAeA,CAACC,YAAY,EAAE;EACrCV,YAAY,CAACM,OAAO,CAAC,cAAc,EAAEI,YAAY,CAAC;AACpD;;AAEA;AACA,OAAO,eAAeC,MAAMA,CAAA,EAAG;EAC7B,IAAI;IACF,MAAMf,KAAK,CAACgB,IAAI,CAAC,SAAS,CAAC;IAC3BC,UAAU,CAAC,CAAC;EACd,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;EACxC;AACF;;AAEA;AACA,OAAO,eAAeJ,YAAYA,CAAA,EAAG;EACnC,IAAI;IACF,MAAMM,QAAQ,GAAG,MAAMpB,KAAK,CAACgB,IAAI,CAAC,gBAAgB,CAAC;IACnD,MAAM;MAAEP,WAAW;MAAEK;IAAa,CAAC,GAAGM,QAAQ,CAACC,IAAI;IACnD,MAAMC,WAAW,GAAGpB,OAAO,CAAC,CAAC;IAC7BqB,OAAO,CAAC;MAAE,GAAGD,WAAW;MAAEb,WAAW;MAAEK;IAAa,CAAC,CAAC;EACxD,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,MAAMA,KAAK,CAAC,CAAC;EACf;AACF;;AAEA;AACA,OAAO,SAASM,cAAcA,CAAA,EAAG;EAC/B,IAAI,CAACvB,IAAI,EAAE;IACTA,IAAI,GAAGC,OAAO,CAAC,CAAC;EAClB;EACA,OAAOD,IAAI;AACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}