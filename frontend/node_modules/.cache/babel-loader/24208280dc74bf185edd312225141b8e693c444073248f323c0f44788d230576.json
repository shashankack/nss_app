{"ast":null,"code":"import axios from 'axios';\nlet user = null;\n\n// Function to set user data in localStorage\nfunction setUser(userData) {\n  localStorage.setItem('user', JSON.stringify(userData));\n}\n\n// Function to remove user data from localStorage\nfunction removeUser() {\n  localStorage.removeItem('user');\n}\n\n// Function to retrieve user data from localStorage\nfunction getUser() {\n  const userData = localStorage.getItem('user');\n  return userData ? JSON.parse(userData) : null;\n}\n\n// Function to perform login API call\nexport async function login(email, password) {\n  try {\n    axios.get(`https://jsonplaceholder.typicode.com/users`).then(res => {\n      const persons = res.data;\n      console.log;\n    });\n    const response = await axios.post('http://localhost:8000/api/login/', {\n      \"email\": email,\n      \"password\": password\n    });\n    const userData = response.data.user;\n    setUser(userData);\n    return userData;\n  } catch (error) {\n    throw new Error('Invalid username or password');\n  }\n}\n\n// Function to perform logout API call\nexport async function logout() {\n  try {\n    await axios.post('/logout');\n    removeUser();\n  } catch (error) {\n    console.error('Logout failed:', error);\n  }\n}\n\n// Function to perform refresh token API call\nexport async function refreshToken() {\n  try {\n    const response = await axios.post('/refresh-token');\n    const {\n      accessToken,\n      refreshToken\n    } = response.data;\n    const currentUser = getUser();\n    setUser({\n      ...currentUser,\n      accessToken,\n      refreshToken\n    });\n  } catch (error) {\n    console.error('Refresh token failed:', error);\n    throw error; // Propagate the error for interceptor to handle\n  }\n}\n\n// Function to get current user data\nexport function getCurrentUser() {\n  if (!user) {\n    user = getUser();\n  }\n  return user;\n}","map":{"version":3,"names":["axios","user","setUser","userData","localStorage","setItem","JSON","stringify","removeUser","removeItem","getUser","getItem","parse","login","email","password","get","then","res","persons","data","console","log","response","post","error","Error","logout","refreshToken","accessToken","currentUser","getCurrentUser"],"sources":["/app/src/utils/auth.js"],"sourcesContent":["\nimport axios from 'axios';\n\nlet user = null;\n\n// Function to set user data in localStorage\nfunction setUser(userData) {\n  localStorage.setItem('user', JSON.stringify(userData));\n}\n\n// Function to remove user data from localStorage\nfunction removeUser() {\n  localStorage.removeItem('user');\n}\n\n// Function to retrieve user data from localStorage\nfunction getUser() {\n  const userData = localStorage.getItem('user');\n  return userData ? JSON.parse(userData) : null;\n}\n\n// Function to perform login API call\nexport async function login(email, password) {\n  try {\n\n    axios.get(`https://jsonplaceholder.typicode.com/users`)\n    .then(res => {\n      const persons = res.data;\n      console.log\n      \n    })\n\n    const response = await axios.post('http://localhost:8000/api/login/', { \"email\": email, \"password\": password });\n    const userData = response.data.user;\n    setUser(userData);\n    return userData;\n  } catch (error) {\n    throw new Error('Invalid username or password');\n  }\n}\n\n// Function to perform logout API call\nexport async function logout() {\n  try {\n    await axios.post('/logout');\n    removeUser();\n  } catch (error) {\n    console.error('Logout failed:', error);\n  }\n}\n\n// Function to perform refresh token API call\nexport async function refreshToken() {\n  try {\n    const response = await axios.post('/refresh-token');\n    const { accessToken, refreshToken } = response.data;\n    const currentUser = getUser();\n    setUser({ ...currentUser, accessToken, refreshToken });\n  } catch (error) {\n    console.error('Refresh token failed:', error);\n    throw error; // Propagate the error for interceptor to handle\n  }\n}\n\n// Function to get current user data\nexport function getCurrentUser() {\n  if (!user) {\n    user = getUser();\n  }\n  return user;\n}\n"],"mappings":"AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,IAAIC,IAAI,GAAG,IAAI;;AAEf;AACA,SAASC,OAAOA,CAACC,QAAQ,EAAE;EACzBC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACJ,QAAQ,CAAC,CAAC;AACxD;;AAEA;AACA,SAASK,UAAUA,CAAA,EAAG;EACpBJ,YAAY,CAACK,UAAU,CAAC,MAAM,CAAC;AACjC;;AAEA;AACA,SAASC,OAAOA,CAAA,EAAG;EACjB,MAAMP,QAAQ,GAAGC,YAAY,CAACO,OAAO,CAAC,MAAM,CAAC;EAC7C,OAAOR,QAAQ,GAAGG,IAAI,CAACM,KAAK,CAACT,QAAQ,CAAC,GAAG,IAAI;AAC/C;;AAEA;AACA,OAAO,eAAeU,KAAKA,CAACC,KAAK,EAAEC,QAAQ,EAAE;EAC3C,IAAI;IAEFf,KAAK,CAACgB,GAAG,CAAE,4CAA2C,CAAC,CACtDC,IAAI,CAACC,GAAG,IAAI;MACX,MAAMC,OAAO,GAAGD,GAAG,CAACE,IAAI;MACxBC,OAAO,CAACC,GAAG;IAEb,CAAC,CAAC;IAEF,MAAMC,QAAQ,GAAG,MAAMvB,KAAK,CAACwB,IAAI,CAAC,kCAAkC,EAAE;MAAE,OAAO,EAAEV,KAAK;MAAE,UAAU,EAAEC;IAAS,CAAC,CAAC;IAC/G,MAAMZ,QAAQ,GAAGoB,QAAQ,CAACH,IAAI,CAACnB,IAAI;IACnCC,OAAO,CAACC,QAAQ,CAAC;IACjB,OAAOA,QAAQ;EACjB,CAAC,CAAC,OAAOsB,KAAK,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;EACjD;AACF;;AAEA;AACA,OAAO,eAAeC,MAAMA,CAAA,EAAG;EAC7B,IAAI;IACF,MAAM3B,KAAK,CAACwB,IAAI,CAAC,SAAS,CAAC;IAC3BhB,UAAU,CAAC,CAAC;EACd,CAAC,CAAC,OAAOiB,KAAK,EAAE;IACdJ,OAAO,CAACI,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;EACxC;AACF;;AAEA;AACA,OAAO,eAAeG,YAAYA,CAAA,EAAG;EACnC,IAAI;IACF,MAAML,QAAQ,GAAG,MAAMvB,KAAK,CAACwB,IAAI,CAAC,gBAAgB,CAAC;IACnD,MAAM;MAAEK,WAAW;MAAED;IAAa,CAAC,GAAGL,QAAQ,CAACH,IAAI;IACnD,MAAMU,WAAW,GAAGpB,OAAO,CAAC,CAAC;IAC7BR,OAAO,CAAC;MAAE,GAAG4B,WAAW;MAAED,WAAW;MAAED;IAAa,CAAC,CAAC;EACxD,CAAC,CAAC,OAAOH,KAAK,EAAE;IACdJ,OAAO,CAACI,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,MAAMA,KAAK,CAAC,CAAC;EACf;AACF;;AAEA;AACA,OAAO,SAASM,cAAcA,CAAA,EAAG;EAC/B,IAAI,CAAC9B,IAAI,EAAE;IACTA,IAAI,GAAGS,OAAO,CAAC,CAAC;EAClB;EACA,OAAOT,IAAI;AACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}