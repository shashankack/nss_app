{"ast":null,"code":"import axios from 'axios';\nimport { refreshToken, logout } from './auth'; // Import your authentication functions\n\nconst BASE_URL = 'https://example.com/api'; // Your API base URL\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: BASE_URL,\n  timeout: 10000 // Adjust as needed\n});\n\n// Request interceptor to attach the access token to each request\napi.interceptors.request.use(config => {\n  const accessToken = localStorage.getItem('accessToken');\n  if (accessToken) {\n    config.headers.Authorization = `Bearer ${accessToken}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor to handle 401 errors and refresh tokens\napi.interceptors.response.use(response => {\n  return response;\n}, async error => {\n  const originalRequest = error.config;\n  if (error.response.status === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    try {\n      await refreshToken(); // Call your refresh token function\n      return api(originalRequest);\n    } catch (refreshError) {\n      logout(); // Call your logout function\n      window.location.href = '/login'; // Redirect to login page\n    }\n  }\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"names":["axios","refreshToken","logout","BASE_URL","api","create","baseURL","timeout","interceptors","request","use","config","accessToken","localStorage","getItem","headers","Authorization","error","Promise","reject","response","originalRequest","status","_retry","refreshError","window","location","href"],"sources":["/app/src/utils/Api.js"],"sourcesContent":["import axios from 'axios';\nimport { refreshToken, logout } from './auth'; // Import your authentication functions\n\nconst BASE_URL = 'https://example.com/api'; // Your API base URL\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: BASE_URL,\n  timeout: 10000, // Adjust as needed\n});\n\n// Request interceptor to attach the access token to each request\napi.interceptors.request.use(\n  (config) => {\n    const accessToken = localStorage.getItem('accessToken');\n    if (accessToken) {\n      config.headers.Authorization = `Bearer ${accessToken}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor to handle 401 errors and refresh tokens\napi.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  async (error) => {\n    const originalRequest = error.config;\n    if (error.response.status === 401 && !originalRequest._retry) {\n      originalRequest._retry = true;\n      try {\n        await refreshToken(); // Call your refresh token function\n        return api(originalRequest);\n      } catch (refreshError) {\n        logout(); // Call your logout function\n        window.location.href = '/login'; // Redirect to login page\n      }\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport default api;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,YAAY,EAAEC,MAAM,QAAQ,QAAQ,CAAC,CAAC;;AAE/C,MAAMC,QAAQ,GAAG,yBAAyB,CAAC,CAAC;;AAE5C;AACA,MAAMC,GAAG,GAAGJ,KAAK,CAACK,MAAM,CAAC;EACvBC,OAAO,EAAEH,QAAQ;EACjBI,OAAO,EAAE,KAAK,CAAE;AAClB,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;EACvD,IAAIF,WAAW,EAAE;IACfD,MAAM,CAACI,OAAO,CAACC,aAAa,GAAI,UAASJ,WAAY,EAAC;EACxD;EACA,OAAOD,MAAM;AACf,CAAC,EACAM,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAb,GAAG,CAACI,YAAY,CAACY,QAAQ,CAACV,GAAG,CAC1BU,QAAQ,IAAK;EACZ,OAAOA,QAAQ;AACjB,CAAC,EACD,MAAOH,KAAK,IAAK;EACf,MAAMI,eAAe,GAAGJ,KAAK,CAACN,MAAM;EACpC,IAAIM,KAAK,CAACG,QAAQ,CAACE,MAAM,KAAK,GAAG,IAAI,CAACD,eAAe,CAACE,MAAM,EAAE;IAC5DF,eAAe,CAACE,MAAM,GAAG,IAAI;IAC7B,IAAI;MACF,MAAMtB,YAAY,CAAC,CAAC,CAAC,CAAC;MACtB,OAAOG,GAAG,CAACiB,eAAe,CAAC;IAC7B,CAAC,CAAC,OAAOG,YAAY,EAAE;MACrBtB,MAAM,CAAC,CAAC,CAAC,CAAC;MACVuB,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ,CAAC,CAAC;IACnC;EACF;EACA,OAAOT,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAeb,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}